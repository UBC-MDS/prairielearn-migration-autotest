Lecture 1: Reading data, single data frame manipulations & tidying data in R
lec_read-data/obj_read, Choose and use the appropriate readr::read_* function and function arguments to load a given rectangular, plain text data set into R. Use readr::read_csv to bring data from standard comma-separated value (.csv) files into R.
lec_read-data/obj_ass-sym, Use the assignment symbol, <-, to assign values to objects in R and explain how it differs from =.
lec_read-data/obj_write-csv, Write a dataframe to a .csv file using readr::write_csv.
lec_read-data/obj_dplyr-functions, Recall and use the following dplyr functions and operators for their intended data wrangling tasks: select, filter, mutate, %in%.
lec_read-data/obj_pipe-operator, Use the pipe operator, %>%, to combine two or more functions.
lec_read-data/obj_tidy-data, Define the term "tidy data". Discuss the advantages and disadvantages of the tidy data format.
lec_read-data/obj_pivot-wider-longer, Use tidyr::pivot_wider & tidyr::pivot_longer in R to make untidy data tidy.

Lecture 2: Key datatypes & operators in R
lec_types-operators/obj_datatypes-definition: Create in R, and define and differentiate in English, the below-listed key datatypes in R: logical, numeric, character, and factor vectors; lists; data frames and tibbles.
lec_types-operators/obj_determine-type: Use R to determine the type and structure of an object.
lec_types-operators/obj_names-values-distinction: Explain the distinction between names and values, and when R will copy an object.
lec_types-operators/obj_subset: Use the three subsetting operators, [[, [, and $, to subset single and multiple elements from vectors and data frames.
lec_types-operators/obj_numeric-boolean: Compute numeric and boolean values using their respective types and operations.
lec_types-operators/obj_tidyverse-style: Write R code that is human-readable and follows the tidyverse style guide.

Lecture 3: Working with dates, strings & factors in R
lec_date-string-factor/obj_date-time-manipulation: Manipulate dates and times using the lubridate package.
lec_date-string-factor/obj_string-modification: Be able to modify strings in a data frame using regular expressions and the stringr package.
lec_date-string-factor/obj_factor-management: Cast categorical columns in a data frame as factors when appropriate, and manipulate factor levels as needed in preparation for data visualization and statistical analysis.

Lecture 4: Two data frame joins & base R control flow
lec4_join-base-control-flow/obj1_joins-comparison: Compare and contrast mutating joins, filtering joins, and set operations.
lec4_join-base-control-flow/obj2_dplyr-join-functions: Choose the appropriate two-table dplyr function based on the type of join desired between two data frames, and use it in R to obtain the desired data frame from joining two tables.
lec4_join-base-control-flow/obj3_conditional-statements: Write conditional statements in R with if, else if, and else to run different code depending on the input.
lec4_join-base-control-flow/obj4_for-loop: Write for loops in R to repeatedly run code.

Lecture 5: Tidy control flow in R
lec5_tidy-control-flow/obj1_grouped-data-frames: Explain what a grouped data frame is, and how it can be used.
lec5_tidy-control-flow/obj2_split-apply-combine: Use {dplyr}'s group_by + summarize to perform the split-apply-combine approach in R to iterate over and summarize data by groups.
lec5_tidy-control-flow/obj3_missing-erroneous: Identify missing and erroneous values and manage them by removing (via {dplyr}'s filter) or replacing (using {dplyr}'s mutate + case_when).
lec5_tidy-control-flow/obj4_functional-programming: Identify where in R code a commonly used functional, a {purrr}'s map* function, could be used in place of for loops and write code to do this.

Lecture 6: Functions & testing in R
lec6_function-test/obj1_function-definition: In R, define and use a named function that accepts parameters and returns values.
lec6_function-test/obj2_lazy-evaluation: Describe lazy evaluation and ... (variable arguments) and how it affects functions in R.
lec6_function-test/obj3_scoping-environments: Explain the importance of scoping and environments in R as they relate to functions.
lec6_function-test/obj4_testthat: Use testthat to formulate a test case to prove a function design specification.
lec6_function-test/obj5_test-driven-development: Use test-driven development principles to define a function that accepts parameters, returns values, and passes all tests.
lec6_function-test/obj6_error-handling: Handle errors gracefully via exception handling.
lec6_function-test/obj7_function-documentation: Use roxygen2 friendly function documentation to describe parameters, return values, description, and example(s). Write comments within a function to improve readability.
lec6_function-test/obj8_function-evaluation: Evaluate the readability, complexity, and performance of a function.
lec6_function-test/obj9_function-sourcing: Source and use functions stored as R code in another file, as well as those in R packages/libraries.
lec6_function-test/obj10_packages-libraries: Describe what R packages/libraries are, as well as explain when and why they are useful.

Lecture 7: Mapping & nested data frames in R
lec7_mapping-nested/obj1_anonymous-purrr: Write and use anonymous functions in R in isolation and in combination with the functional {purrr} map
lec7_mapping-nested/obj2_purrr-map-functions: Understand the general ideas of the map*, map2* and pmap* variant functions in the {purrr} package and the six types of output options (list, double, integer, logical, character and data frame).
lec7_mapping-nested/obj3_nested-df: Create and modify nested data frames using {dplyr} group_by + {tidyr} nest and {purrr} map* functions
lec7_mapping-nested/obj4_unnest-df: Create unnested data frames using {tidyr} unnest
lec7_mapping-nested/obj5_nested-df-discussion: Describe situations where nested data frames are useful

Lecture 8: Tidy evaluation in R
lec8_tidy-eval/obj1_data-masking: Describe data masking as it relates to the dplyr functions. Explain the problems it solves for interactive programming and the problems it creates for programming in a non-interactive setting
lec8_tidy-eval/obj2_enquo-bang: Explain what the enquo() function and the !! operator do in R in the context of data masking as it relates to the dplyr functions
lec8_tidy-eval/obj3_curly-operator: Use the {{ (read: curly curly) operator (abstracts quote-and-unquote into a single interpolation step), the := (read: walrus) operatpr in R, and ... (read: pass the dots) to write functions which wrap the dplyr functions