python:
    pl:
        image: "prairielearn/grader-python"
        entrypoint: "/grade/serverFilesCourse/autograder/run.sh" #  "/python_autograder/run.sh"
        server_files: "autograder/"
        ace_mode: "ace/mode/python"
        submission_file_name: "user_code.py"
        source_file_name: "initial_code.py"
        solution_file_name: "ans.py"
        test_file_name: "test.py"
        workspace_image: "ubcmds/base-python"
        workspace_port: 8080
        workspace_home: "/home/jovyan"
        workspace_graded: "user_code.py"


    testfile_template: "from code_feedback import Feedback\nfrom pl_helpers import name, points\nfrom utils import source_ans, source_student, MyTestCase, MyFeedback\n\n\nclass Test(MyTestCase):\n"
    dispatch: "type({{snippet}})"
    test_case_template: "    @points({{score}})\n    @name('test case {{count}}')\n    def test_{{count}}(self):\n        ans_env = source_ans({{solution_params}})\n        student_env = source_student({{submission_params}})\n        if {{check_fn}}({{test_string}}, eval({{test_expr}}, ans_env), eval({{test_expr}}, student_env)):\n            Feedback.set_score(1)\n        else:\n            Feedback.set_score(0)\n\n"

    test_expr_templates:
        scalar:
          - test: "{{snippet}}"
            check_fn: 'Feedback.check_scalar'
            point: 1.0

        int:
          - test: "{{snippet}}"
            check_fn: 'Feedback.check_scalar'
            point: 1.0

        int64:
          - test: "{{snippet}}"
            check_fn: 'Feedback.check_scalar'
            point: 1.0

        float:
          - test: "{{snippet}}"
            check_fn: 'Feedback.check_scalar'
            point: 1.0

        float64:
          - test: "{{snippet}}"
            check_fn: 'Feedback.check_scalar'
            point: 1.0

        bool:
          - test: "{{snippet}}"
            check_fn: 'MyFeedback.check_bool'
            point: 1.0

        list:
          - test: "{{snippet}}"
            check_fn: 'MyFeedback.check_type'
            point: 0.25

          - test: "{{snippet}}"
            check_fn: 'MyFeedback.check_list'
            point: 1.0

        tuple:
          - test: "{{snippet}}"
            check_fn: 'MyFeedback.check_type'
            point: 0.25

          - test: "{{snippet}}"
            check_fn: 'Feedback.check_tuple'
            point: 1.0

        DataFrame:
          - test: "{{snippet}}"
            check_fn: 'MyFeedback.check_type'
            point: 0.25

          - test: "{{snippet}}"
            check_fn: 'Feedback.check_dataframe'
            point: 0.75

        ndarray:
          - test: "{{snippet}}"
            check_fn: 'MyFeedback.check_type'
            point: 0.25

          - test: "{{snippet}}"
            check_fn: 'Feedback.check_numpy_array_allclose'
            point: 0.75


r:
    pl:
        image: "prairielearn/grader-r"
        entrypoint: "/grade/serverFilesCourse/autograder/run.sh" # "r_autograder/run.sh"
        server_files: "autograder/" # ""
        ace_mode: "ace/mode/r"
        submission_file_name: "submission.R"
        source_file_name: "initial_code.R"
        solution_file_name: "solution.R"
        test_file_name: "test.R"
        workspace_image: "ubcmds/base-r"
        workspace_port: 3939
        workspace_home: "/home/rstudio/workspace"
        workspace_graded: "submission.R"

    testfile_template: "library(tinytest)\nsource('/grade/run/utils.R')\n\n"
    source_template: "solution <- source_solution({{solution_params}})\nstudent <- source_submission({{submission_params}})\n\n"
    test_case_template: "## @title test {{test_expr}}\n## @score {{score}}\nexpect_equal(eval(parse(text = '{{test_expr}}'), envir = solution), eval(parse(text = '{{test_expr}}'), envir = student))\n\n"
    error_case_template: "## @title expect_error({{snippet}})\n## @score {{score}}\nexpect_error(student${{snippet}})\n\n"

    dispatch: "class({{snippet}})"

    test_expr_templates:
        default:
            - test: "class({{snippet}})"
              fail: "type of {{snippet}} is not correct"
              point: 0.1

            - test: "{{snippet}}"
              fail: "value of {{snippet}} is not correct"
              point: 0.9

        tbl:
            - test: "class({{snippet}})"
              fail: "type of {{snippet}} is not correct"
              point: 0.1

            - test: "{{snippet}}"
              fail: "value of {{snippet}} is not correct"
              point: 0.9

        data.frame:
            - test: "class({{snippet}})"
              fail: "type of {{snippet}} is not correct"
              point: 0.1

            - test: "{{snippet}}"
              fail: "value of {{snippet}} is not correct"
              point: 0.9

        numeric:
            - test: "class({{snippet}})"
              fail: "type of {{snippet}} is not double"
              point: 0.1

            - test: "round({{snippet}}, 2)"
              fail: "value of {{snippet}} is not correct (rounded to 2 decimal places)"
              point: 0.3

            - test: "length({{snippet}})"
              fail: "length of {{snippet}} is not correct"
              point: 0.3

            - test: "sort({{snippet}})"
              fail: "values of {{snippet}} are not correct"
              point: 0.3

        list:
            - test: "class({{snippet}})"
              fail: "type of {{snippet}} is not list"
              point: 0.1

            - test: "length({{snippet}})"
              fail: "length of {{snippet}} is not correct"
              point: 0.3

            - test: "sort(c(names({{snippet}})))"
              fail: "values of {{snippet}} names are not correct"
              point: 0.3

            - test: "{{snippet}}"
              fail: "order of elements of {{snippet}} is not correct"
              point: 0.3

        character:
            - test: "class({{snippet}})"
              fail: "type of {{snippet}} is not list"
              point: 0.1

            - test: "length({{snippet}})"
              fail: "length of {{snippet}} is not correct"
              point: 0.3

            - test: "tolower({{snippet}})"
              fail: "value of {{snippet}} is not correct"
              point: 0.3

            - test: "{{snippet}}"
              fail: "correct string value of {{snippet}} but incorrect case of letters"
              point: 0.3

        logical:
            - test: "class({{snippet}})"
              fail: "type of {{snippet}} is not logical"
              point: 0.1

            - test: "{{snippet}}"
              fail: "logical value of {{snippet}} is not correct"
              point: 0.9